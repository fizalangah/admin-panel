// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "./globals.css";
// import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
// import { AppSidebar } from "@/components/app-sidebar";
// import { AuthProvider } from "./provider/provider";
// import { getServerSession } from "next-auth";
// import { authOptions } from "./api/lib/auth";

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default async function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const session = await getServerSession(authOptions); // Get the session on the server side
//   console.log("Session in RootLayout:", session);

//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         <AuthProvider>
//           {session ? ( // Render sidebar and header only if the user is authenticated
//             <SidebarProvider>
//               <AppSidebar />
//               <main className="w-full">
//                 <SidebarTrigger />
//                 {children}
//               </main>
//             </SidebarProvider>
//           ) : (
//             // Render only the children (login/signup pages) if the user is not authenticated
//             <>{children}</>
//           )}
//         </AuthProvider>
//       </body>
//     </html>
//   );
// }





import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { AuthProvider } from "./provider/provider";



const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {


  
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
         <AuthProvider> 

      <main className="w-full">
        {children}
      </main>
    </AuthProvider>  
      </body>
    </html>
  );
}
